"use strict";function _toConsumableArray(a){if(Array.isArray(a)){for(var b=0,c=Array(a.length);b<a.length;b++)c[b]=a[b];return c}return Array.from(a)}var playing=!0,timer=function(){return setInterval(function(){var a=document.getElementById("counter"),b=parseInt(a.innerText);a.innerText=b+1},1e3)},interval=timer(),minus=document.getElementById("minus"),plus=document.getElementById("plus"),heart=document.getElementById("heart"),pause=document.getElementById("pause"),commentForm=document.getElementsByTagName("form")[0];minus.addEventListener("click",function(){var a=document.getElementById("counter"),b=parseInt(a.innerText);a.innerText=b-1}),plus.addEventListener("click",function(){var a=document.getElementById("counter"),b=parseInt(a.innerText);a.innerText=b+1}),heart.addEventListener("click",function(){var a=document.getElementById("counter"),b=parseInt(a.innerText),c=document.querySelector(".likes"),d=void 0;if([].concat(_toConsumableArray(c.children)).map(function(a){return parseInt(a.dataset.num)}).includes(b)){d=document.querySelector('[data-num="'+b+'"]');var e=parseInt(d.children[0].innerText);d.innerHTML=b+" has been liked <span>"+(e+1)+"</span> times"}else(d=document.createElement("li")).setAttribute("data-num",b),d.innerHTML=b+" has been liked <span>1</span> time",c.appendChild(d)}),pause.addEventListener("click",function(){playing?(playing=!1,clearInterval(interval),this.innerText="resume"):(playing=!0,interval=timer(),this.innerText="pause"),[].concat(_toConsumableArray(document.getElementsByTagName("button"))).forEach(function(a){"pause"!==a.id&&(a.disabled=!playing)})}),commentForm.addEventListener("submit",function(a){a.preventDefault();var b=this.children[0],c=b.value;b.value="";var d=document.querySelector(".comments"),e=document.createElement("p");e.innerText=c,d.appendChild(e)});
// js/challenge.js
document.addEventListener('DOMContentLoaded', () => {
    const counter = document.querySelector('#counter');
    const plusBtn = document.querySelector('#plus');
    const minusBtn = document.querySelector('#minus');
    const heartBtn = document.querySelector('#heart');
    const pauseBtn = document.querySelector('#pause');
    const commentForm = document.querySelector('#comment-form');
    const commentInput = document.querySelector('#comment-input');
    const commentsList = document.querySelector('#list');
    const likesList = document.querySelector('.likes');
    
    let count = 0;
    let isPaused = false;
    const likes = {};
    
    // Start timer
    let timer = setInterval(() => {
        if (!isPaused) {
            count++;
            counter.textContent = count;
        }
    }, 1000);
    
    // Plus button
    plusBtn.addEventListener('click', () => {
        count++;
        counter.textContent = count;
    });
    
    // Minus button
    minusBtn.addEventListener('click', () => {
        count--;
        counter.textContent = count;
    });
    
    // Like button
    heartBtn.addEventListener('click', () => {
        const currentCount = count;
        likes[currentCount] = (likes[currentCount] || 0) + 1;
        let likeItem = document.querySelector(`[data-number="${currentCount}"]`);
        if (!likeItem) {
            likeItem = document.createElement('li');
            likeItem.setAttribute('data-number', currentCount);
            likesList.appendChild(likeItem);
        }
        likeItem.textContent = `${currentCount} has ${likes[currentCount]} like${likes[currentCount] === 1 ? '' : 's'}`;
    });
    
    // Pause/Resume button
    pauseBtn.addEventListener('click', () => {
        isPaused = !isPaused;
        if (isPaused) {
            clearInterval(timer); // Ensure the timer is cleared when paused
            plusBtn.disabled = true;
            minusBtn.disabled = true;
            heartBtn.disabled = true;
            pauseBtn.textContent = 'resume';
        } else {
            timer = setInterval(() => {
                if (!isPaused) {
                    count++;
                    counter.textContent = count;
                }
            }, 1000); // Restart the timer when resumed
            plusBtn.disabled = false;
            minusBtn.disabled = false;
            heartBtn.disabled = false;
            pauseBtn.textContent = 'pause';
        }
    });
    
    // Comments
    commentForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const commentText = commentInput.value.trim();
        if (commentText) {
            const comment = document.createElement('p');
            comment.textContent = commentText;
            commentsList.appendChild(comment);
            commentInput.value = '';
        }
    });
});